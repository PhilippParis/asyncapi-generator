package {{options.modelPackage}};

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
{{^type.children.empty}}
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes;
{{/type.children.empty}}

{{#type.imports}}
import {{.}};
{{/type.imports}}

{{^type.children.empty}}
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "{{type.discriminator}}")
@JsonSubTypes({
{{#type.children}}
    @JsonSubTypes.Type(value = {{typeName}}.class, name = "{{subTypeName}}"){{^-last}},{{/-last}}
{{/type.children}}
})
{{/type.children.empty}}
public {{#type.properties.empty}}abstract {{/type.properties.empty}}class {{type.typeName}}{{#type.parent}} extends {{type.parent.typeName}}{{/type.parent}} {

{{! class properties }}
{{#type.properties}}
    private {{propertyType.typeName}} {{propertyName}}{{#propertyType.init.present}} = {{propertyType.init.get}}{{/propertyType.init.present}};
{{/type.properties}}

{{! getter / setters }}
{{#type.properties}}
    @JsonProperty(value = "{{propertyId}}", required = {{required}})
    public {{propertyType.typeName}} get{{#PascalCase}}{{propertyName}}{{/PascalCase}}() {
        return this.{{propertyName}};
    }
    public void set{{#PascalCase}}{{propertyName}}{{/PascalCase}}({{propertyType.typeName}} {{propertyName}}) {
        this.{{propertyName}} = {{propertyName}};
    }
    public {{type.typeName}} {{propertyName}}({{propertyType.typeName}} {{propertyName}}) {
        this.{{propertyName}} = {{propertyName}};
        return this;
    }

{{/type.properties}}

{{^type.properties.empty}}
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("{{type.typeName}}{");
{{#type.properties}}
        sb.append("{{propertyName}}='").append({{#propertyType.password}}"***"{{/propertyType.password}}{{^propertyType.password}}{{propertyName}}{{/propertyType.password}}).append("',");
{{/type.properties}}
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
{{#type.parent}}
        if (!super.equals(o)) return false;
{{/type.parent}}
        {{type.typeName}} other = ({{type.typeName}}) o;
{{#type.properties}}
        {{#-first}}return{{/-first}}{{^-first}}&&{{/-first}} Objects.equals({{propertyName}}, other.{{propertyName}}){{#-last}};{{/-last}}
{{/type.properties}}
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(){{#type.properties}}, {{propertyName}}{{/type.properties}});
    }
{{/type.properties.empty}}

}