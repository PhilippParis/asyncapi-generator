generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\NumberFormats.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigDecimal;
import java.math.BigInteger;

public class NumberFormats {

    private BigDecimal propNumber;
    private Float propFloat;
    private Double propDouble;
    private BigInteger propInteger;
    private Integer propInt32;
    private Long propInt64;

    @JsonProperty(value = "propNumber", required = false)
    public BigDecimal getPropNumber() {
        return this.propNumber;
    }
    public void setPropNumber(BigDecimal propNumber) {
        this.propNumber = propNumber;
    }
    public NumberFormats propNumber(BigDecimal propNumber) {
        this.propNumber = propNumber;
        return this;
    }

    @JsonProperty(value = "propFloat", required = false)
    public Float getPropFloat() {
        return this.propFloat;
    }
    public void setPropFloat(Float propFloat) {
        this.propFloat = propFloat;
    }
    public NumberFormats propFloat(Float propFloat) {
        this.propFloat = propFloat;
        return this;
    }

    @JsonProperty(value = "propDouble", required = false)
    public Double getPropDouble() {
        return this.propDouble;
    }
    public void setPropDouble(Double propDouble) {
        this.propDouble = propDouble;
    }
    public NumberFormats propDouble(Double propDouble) {
        this.propDouble = propDouble;
        return this;
    }

    @JsonProperty(value = "propInteger", required = false)
    public BigInteger getPropInteger() {
        return this.propInteger;
    }
    public void setPropInteger(BigInteger propInteger) {
        this.propInteger = propInteger;
    }
    public NumberFormats propInteger(BigInteger propInteger) {
        this.propInteger = propInteger;
        return this;
    }

    @JsonProperty(value = "propInt32", required = false)
    public Integer getPropInt32() {
        return this.propInt32;
    }
    public void setPropInt32(Integer propInt32) {
        this.propInt32 = propInt32;
    }
    public NumberFormats propInt32(Integer propInt32) {
        this.propInt32 = propInt32;
        return this;
    }

    @JsonProperty(value = "propInt64", required = false)
    public Long getPropInt64() {
        return this.propInt64;
    }
    public void setPropInt64(Long propInt64) {
        this.propInt64 = propInt64;
    }
    public NumberFormats propInt64(Long propInt64) {
        this.propInt64 = propInt64;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("NumberFormats{");
        sb.append("propNumber='").append(propNumber).append("',");
        sb.append("propFloat='").append(propFloat).append("',");
        sb.append("propDouble='").append(propDouble).append("',");
        sb.append("propInteger='").append(propInteger).append("',");
        sb.append("propInt32='").append(propInt32).append("',");
        sb.append("propInt64='").append(propInt64).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        NumberFormats other = (NumberFormats) o;
        return Objects.equals(propNumber, other.propNumber)
        && Objects.equals(propFloat, other.propFloat)
        && Objects.equals(propDouble, other.propDouble)
        && Objects.equals(propInteger, other.propInteger)
        && Objects.equals(propInt32, other.propInt32)
        && Objects.equals(propInt64, other.propInt64);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), propNumber, propFloat, propDouble, propInteger, propInt32, propInt64);
    }

}
====================
generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\StringFormats.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.time.OffsetDateTime;
import java.time.LocalDate;
import java.util.UUID;

public class StringFormats {

    private String propString;
    private String propBytes;
    private LocalDate propDate;
    private OffsetDateTime propDateTime;
    private String propPassword;
    private UUID propUuid;

    @JsonProperty(value = "propString", required = false)
    public String getPropString() {
        return this.propString;
    }
    public void setPropString(String propString) {
        this.propString = propString;
    }
    public StringFormats propString(String propString) {
        this.propString = propString;
        return this;
    }

    @JsonProperty(value = "propBytes", required = false)
    public String getPropBytes() {
        return this.propBytes;
    }
    public void setPropBytes(String propBytes) {
        this.propBytes = propBytes;
    }
    public StringFormats propBytes(String propBytes) {
        this.propBytes = propBytes;
        return this;
    }

    @JsonProperty(value = "propDate", required = false)
    public LocalDate getPropDate() {
        return this.propDate;
    }
    public void setPropDate(LocalDate propDate) {
        this.propDate = propDate;
    }
    public StringFormats propDate(LocalDate propDate) {
        this.propDate = propDate;
        return this;
    }

    @JsonProperty(value = "propDateTime", required = false)
    public OffsetDateTime getPropDateTime() {
        return this.propDateTime;
    }
    public void setPropDateTime(OffsetDateTime propDateTime) {
        this.propDateTime = propDateTime;
    }
    public StringFormats propDateTime(OffsetDateTime propDateTime) {
        this.propDateTime = propDateTime;
        return this;
    }

    @JsonProperty(value = "propPassword", required = false)
    public String getPropPassword() {
        return this.propPassword;
    }
    public void setPropPassword(String propPassword) {
        this.propPassword = propPassword;
    }
    public StringFormats propPassword(String propPassword) {
        this.propPassword = propPassword;
        return this;
    }

    @JsonProperty(value = "propUuid", required = false)
    public UUID getPropUuid() {
        return this.propUuid;
    }
    public void setPropUuid(UUID propUuid) {
        this.propUuid = propUuid;
    }
    public StringFormats propUuid(UUID propUuid) {
        this.propUuid = propUuid;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StringFormats{");
        sb.append("propString='").append(propString).append("',");
        sb.append("propBytes='").append(propBytes).append("',");
        sb.append("propDate='").append(propDate).append("',");
        sb.append("propDateTime='").append(propDateTime).append("',");
        sb.append("propPassword='").append("***").append("',");
        sb.append("propUuid='").append(propUuid).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        StringFormats other = (StringFormats) o;
        return Objects.equals(propString, other.propString)
        && Objects.equals(propBytes, other.propBytes)
        && Objects.equals(propDate, other.propDate)
        && Objects.equals(propDateTime, other.propDateTime)
        && Objects.equals(propPassword, other.propPassword)
        && Objects.equals(propUuid, other.propUuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), propString, propBytes, propDate, propDateTime, propPassword, propUuid);
    }

}
====================
