generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\MessageOneOf.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes;


@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@class")
@JsonSubTypes({
    @JsonSubTypes.Type(value = ObjectPayload1.class, name = "ObjectPayload1"),
    @JsonSubTypes.Type(value = ObjectPayload2.class, name = "ObjectPayload2")
})
public abstract class MessageOneOf {




}
====================
generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\MessageWithObjectPayload.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;


public class MessageWithObjectPayload {

    private Integer prop;

    @JsonProperty(value = "prop", required = false)
    public Integer getProp() {
        return this.prop;
    }
    public void setProp(Integer prop) {
        this.prop = prop;
    }
    public MessageWithObjectPayload prop(Integer prop) {
        this.prop = prop;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MessageWithObjectPayload{");
        sb.append("prop='").append(prop).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MessageWithObjectPayload other = (MessageWithObjectPayload) o;
        return Objects.equals(prop, other.prop);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), prop);
    }

}
====================
generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\ObjectPayload1.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;


public class ObjectPayload1 extends MessageOneOf {

    private Integer prop1;

    @JsonProperty(value = "prop1", required = false)
    public Integer getProp1() {
        return this.prop1;
    }
    public void setProp1(Integer prop1) {
        this.prop1 = prop1;
    }
    public ObjectPayload1 prop1(Integer prop1) {
        this.prop1 = prop1;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ObjectPayload1{");
        sb.append("prop1='").append(prop1).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;
        ObjectPayload1 other = (ObjectPayload1) o;
        return Objects.equals(prop1, other.prop1);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), prop1);
    }

}
====================
generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\ObjectPayload2.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;


public class ObjectPayload2 extends MessageOneOf {

    private Integer prop2;

    @JsonProperty(value = "prop2", required = false)
    public Integer getProp2() {
        return this.prop2;
    }
    public void setProp2(Integer prop2) {
        this.prop2 = prop2;
    }
    public ObjectPayload2 prop2(Integer prop2) {
        this.prop2 = prop2;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ObjectPayload2{");
        sb.append("prop2='").append(prop2).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;
        ObjectPayload2 other = (ObjectPayload2) o;
        return Objects.equals(prop2, other.prop2);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), prop2);
    }

}
====================
