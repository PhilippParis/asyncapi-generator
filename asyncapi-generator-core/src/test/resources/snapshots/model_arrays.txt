generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\Item.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;


public class Item {

    private Integer prop;

    @JsonProperty(value = "prop", required = false)
    public Integer getProp() {
        return this.prop;
    }
    public void setProp(Integer prop) {
        this.prop = prop;
    }
    public Item prop(Integer prop) {
        this.prop = prop;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Item{");
        sb.append("prop='").append(prop).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Item other = (Item) o;
        return Objects.equals(prop, other.prop);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), prop);
    }

}
====================
generated-sources\asyncapi\src\gen\java\main\com\asyncapi\models\Root.java
--------------------
package com.asyncapi.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.UUID;
import java.util.ArrayList;

public class Root {

    private ArrayList<UUID> uuidArray = new ArrayList<UUID>();
    private ArrayList<Integer> integerArray = new ArrayList<Integer>();
    private ArrayList<Item> objectArray = new ArrayList<Item>();

    @JsonProperty(value = "uuidArray", required = false)
    public ArrayList<UUID> getUuidArray() {
        return this.uuidArray;
    }
    public void setUuidArray(ArrayList<UUID> uuidArray) {
        this.uuidArray = uuidArray;
    }
    public Root uuidArray(ArrayList<UUID> uuidArray) {
        this.uuidArray = uuidArray;
        return this;
    }

    @JsonProperty(value = "integerArray", required = false)
    public ArrayList<Integer> getIntegerArray() {
        return this.integerArray;
    }
    public void setIntegerArray(ArrayList<Integer> integerArray) {
        this.integerArray = integerArray;
    }
    public Root integerArray(ArrayList<Integer> integerArray) {
        this.integerArray = integerArray;
        return this;
    }

    @JsonProperty(value = "objectArray", required = false)
    public ArrayList<Item> getObjectArray() {
        return this.objectArray;
    }
    public void setObjectArray(ArrayList<Item> objectArray) {
        this.objectArray = objectArray;
    }
    public Root objectArray(ArrayList<Item> objectArray) {
        this.objectArray = objectArray;
        return this;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Root{");
        sb.append("uuidArray='").append(uuidArray).append("',");
        sb.append("integerArray='").append(integerArray).append("',");
        sb.append("objectArray='").append(objectArray).append("',");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Root other = (Root) o;
        return Objects.equals(uuidArray, other.uuidArray)
        && Objects.equals(integerArray, other.integerArray)
        && Objects.equals(objectArray, other.objectArray);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), uuidArray, integerArray, objectArray);
    }

}
====================
